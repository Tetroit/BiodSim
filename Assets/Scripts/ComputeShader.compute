// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


#define THREADS 128
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Boid
{
    float3 pos;
    float3 dir;
};

float3 min;
float3 max;

RWStructuredBuffer<Boid> boids;
uint elementCount;

float repellingFac = 1;
float flockingFac = 1;
float clutchingFac = 1;
float repelDist = 0.5f;
float flockDist = 1.0f;
float _DeltaTime = 0;


[numthreads(THREADS,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint stride = THREADS;
    for (uint current = id.x; current<elementCount; current+=stride)
    {
        float3 avDir = (float3)0;
        float3 avPos = (float3)0;
        int count = 0;
        for (uint i=0; i<elementCount; i++)
        {
            if (i == current) continue;

            float3 rVec = boids[current].pos - boids[i].pos;

            float r2 = dot(rVec, rVec);
            if (r2 == 0) r2 = 0.001;

            float r = length(rVec);
            if (r == 0) r = 0.001;

            if (r < flockDist)
            {
                avDir += boids[i].dir / r;
                avPos += boids[i].pos;
                count++;
            }
            if (r < repelDist)
            {
                float3 repelDir = rVec / r;
                boids[current].dir += (_DeltaTime * repellingFac / r2) * repelDir;
                boids[current].dir = normalize(boids[current].dir);
            }
        }
        if (count > 0)
        {
            float3 dirToAv = avPos/count - boids[current].pos;    
            //boids[current].dir = lerp(boids[current].dir, normalize(avDir) + (clutchingFac * dirToAv), _DeltaTime * flockingFac);
            boids[current].dir = lerp(boids[current].dir, normalize(avDir), _DeltaTime * flockingFac);
            boids[current].dir = normalize(boids[current].dir);
        }
        boids[current].pos += boids[current].dir * _DeltaTime;
    }
}
